# -*- coding: utf-8 -*-
"""
Created on Wed Jul  9 17:49:12 2025

@author: usouu
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %% Matrix Plot
# %% Heatmap matrix plot
def matrix_plot(accuracy_data, lambda_values, sigma_values, fontsize=12):
    log_lambda_labels = np.round(np.log10(lambda_values)).astype(int).astype(str)
    vmin, vmax = 60, 95
    fig, axes = plt.subplots(2, 3, figsize=(15, 10), constrained_layout=True)
    axes = axes.flatten()
    sr_keys = list(accuracy_data.keys())

    mappable = None

    for i, sr in enumerate(sr_keys):
        ax = axes[i]
        acc_matrix = accuracy_data[sr]
        show_xlabel = (i >= 3)
        show_ylabel = (i % 3 == 0)

        heatmap = sns.heatmap(
            acc_matrix,
            ax=ax,
            xticklabels=sigma_values if show_xlabel else False,
            yticklabels=log_lambda_labels if show_ylabel else False,
            cmap='coolwarm',
            annot=True,
            fmt=".1f",
            vmin=vmin,
            vmax=vmax,
            cbar=False,
            annot_kws={"size": fontsize * 0.7}  # 控制格子里数字大小
        )

        if show_xlabel:
            ax.set_xlabel('σ', fontsize=fontsize)
        if show_ylabel:
            ax.set_ylabel('log10(λ)', fontsize=fontsize)

        ax.tick_params(axis='x', labelsize=fontsize * 0.8)
        ax.tick_params(axis='y', labelsize=fontsize * 0.8)
        ax.set_title(f'sr={sr.split("=")[1]}', fontsize=fontsize + 2)

        ax.invert_yaxis()

        if mappable is None:
            mappable = heatmap.get_children()[0]

    # 添加统一 colorbar
    cbar_ax = fig.add_axes([1.02, 0.05, 0.02, 0.915])
    cbar = fig.colorbar(mappable, cax=cbar_ax, label='Average Accuracy (%)')
    cbar.ax.tick_params(labelsize=fontsize * 0.8)
    cbar.ax.set_ylabel('Average Accuracy (%)', fontsize=fontsize)

    plt.show()

# %% Topographic plot
def topographic_plot(accuracy_data, lambda_values, sigma_values, max_mark=False, fontsize=12):
    LAMBDA, SIGMA = np.meshgrid(np.log10(lambda_values), sigma_values, indexing='ij')
    vmin, vmax = 60, 95
    fig, axes = plt.subplots(2, 3, figsize=(15, 10), constrained_layout=True)
    axes = axes.flatten()
    sr_keys = list(accuracy_data.keys())
    
    contour_mappable = None
    
    for i, sr in enumerate(sr_keys):
        ax = axes[i]
        acc_matrix = accuracy_data[sr]
        Z = acc_matrix.astype(float)
    
        contour = ax.contourf(SIGMA, LAMBDA, Z, levels=20, cmap='coolwarm', vmin=vmin, vmax=vmax)
        ax.contour(SIGMA, LAMBDA, Z, levels=10, colors='k', linewidths=0.5, alpha=0.5)
        
        if i % 3 == 0:
            ax.set_ylabel('log10(lambda)', fontsize=fontsize)
        else:
            ax.set_yticklabels([])
    
        if i >= 3:
            ax.set_xlabel('sigma', fontsize=fontsize)
        else:
            ax.set_xticklabels([])
    
        ax.tick_params(axis='x', labelsize=fontsize * 0.8)
        ax.tick_params(axis='y', labelsize=fontsize * 0.8)
        ax.set_title(f'subnetwork={sr.split("=")[1]}', fontsize=fontsize + 2)
    
        if max_mark:
            max_idx = np.unravel_index(np.argmax(Z), Z.shape)
            ax.plot(SIGMA[max_idx], LAMBDA[max_idx], 'ro')
    
        if contour_mappable is None:
            contour_mappable = contour

    cbar_ax = fig.add_axes([1.02, 0.05, 0.02, 0.915])
    cbar = fig.colorbar(contour_mappable, cax=cbar_ax)
    cbar.ax.tick_params(labelsize=fontsize * 0.8)
    cbar.ax.set_ylabel('Average Accuracy (%)', fontsize=fontsize)

    plt.show()


# %% Execute
# 原始 lambda 和 sigma
lambda_values = np.array([1e-6, 1e-5, 1e-4, 1e-3, 0.01, 0.1, 1.0])
sigma_values = [0.05, 0.1, 0.15, 0.2, 0.3]

# accuracy_data 略，保持原样
accuracy_data_pcc = {
    "subnetwork=100%": np.array([
        [80.47689859, 67.35891026, 89.92479462, 90.37968322, 87.30118484],
        [80.89005095, 84.81928621, 90.84294558, 90.67381494, 86.23020672],
        [80.85457198, 89.65092547, 91.46292788, 91.05237358, 88.30643575],
        [82.08998924, 91.99127155, 91.74537554, 91.10730485, 82.58739839],
        [90.20265458, 92.91743297, 92.17125869, 89.14655259, 85.48592116],
        [92.27043775, 92.49271764, 90.29034277, 86.33900812, 78.42431163],
        [92.91062495, 89.91780206, 85.66887834, 81.67676191, 77.46039037]
    ]),
    "subnetwork=50%": np.array([
        [75.35210224, 68.50782446, 90.2874304, 90.9037881, 87.26677855],
        [75.26551268, 84.74643379, 91.1036543, 91.55590158, 86.97415779],
        [75.31721151, 89.97668088, 91.88586118, 91.58874788, 88.45688688],
        [76.5707979, 92.22833531, 91.5241712, 91.31244503, 82.33877456],
        [85.70146512, 92.77287866, 91.98062844, 88.3274913, 82.22805561],
        [89.79350744, 89.52615507, 86.82776379, 81.5770494, 76.22549215],
        [88.89303252, 86.85522366, 82.12086033, 79.84868381, 75.35649097]
    ]),
    "subnetwork=40%": np.array([
        [74.05719773, 69.88697711, 89.89700603, 91.07968062, 87.63049853],
        [73.5951176, 84.10942425, 91.67779421, 91.03869411, 86.74030052],
        [73.36000023, 89.31853505, 92.17116065, 91.34730693, 89.71433432],
        [75.90423216, 92.45078245, 91.8368671, 91.24294039, 82.07441241],
        [83.27595683, 92.94399894, 91.35591715, 87.25112962, 84.5593301],
        [88.72247453, 88.61084727, 84.90969645, 83.0249339, 76.78057769],
        [87.31020165, 85.93463035, 81.2149067, 77.76865428, 75.23479154]
    ]),
    "subnetwork=30%": np.array([
        [72.65662044, 68.15789352, 88.29212767, 90.27520999, 86.03230708],
        [72.68401111, 84.21141186, 90.02141599, 90.88169159, 84.71851544],
        [72.90959553, 89.35113049, 91.74761892, 91.21247012, 87.66381774],
        [74.59385462, 91.02140445, 91.46291923, 90.46679181, 79.32910896],
        [83.2631453, 91.85156158, 91.12449646, 85.09301984, 81.10008737],
        [85.6493972, 87.80364305, 83.76485091, 79.49757351, 72.64104937],
        [81.60850296, 80.82082313, 78.30470852, 74.99961361, 72.9595181]
    ]),
    "subnetwork=20%": np.array([
        [70.63520446, 66.82219281, 85.76683189, 87.23974256, 83.72827043],
        [71.64596003, 77.92802418, 85.86036211, 89.00221744, 81.42617151],
        [72.11461172, 86.59356915, 89.33322088, 89.10826795, 85.22769805],
        [72.61613855, 89.25140068, 90.10522871, 88.73717477, 71.80904102],
        [78.14385938, 90.250031, 88.71001479, 79.25641225, 77.40639048],
        [79.88672624, 82.40912119, 79.85285917, 77.12545668, 69.44156668],
        [74.5081849, 75.10672238, 75.11255576, 73.0858831, 69.2840855]
    ]),
    "subnetwork=10%": np.array([
        [62.18893185, 61.72432864, 71.52881369, 74.70821259, 72.87762582],
        [62.18145197, 61.0023645, 70.625164, 76.16727365, 72.37664686],
        [61.69174474, 72.97621952, 77.21775852, 79.12911011, 76.03957647],
        [62.83629039, 78.18427207, 78.42489122, 77.60573188, 67.59860956],
        [66.59765511, 82.0953901, 77.15460053, 72.89000482, 70.88471642],
        [66.05417579, 68.96462772, 71.54556989, 70.74582537, 63.77307474],
        [63.75908673, 66.7089104, 68.1684732, 68.01942347, 64.60897874]
    ])
}

accuracy_data_plv = {
    "subnetwork=100%": np.array([
        [73.46378429, 65.63470849, 89.6329899, 90.3462429, 87.33708769],
        [73.96466521, 83.21377636, 91.49291372, 90.02630357, 83.61527349],
        [74.58993013, 89.77056895, 91.25084127, 91.04236196, 87.15292231],
        [74.38260423, 92.38549353, 91.6794955, 91.17806671, 86.44139367],
        [86.70483309, 92.68436578, 92.37171602 ,91.02478972, 85.4144759],
        [93.94103755, 93.18389721, 91.96662601, 89.8066823, 81.96463061],
        [93.2508528, 91.16293394, 87.19949711, 82.80669095, 76.16285608]
    ]),
    "subnetwork=50%": np.array([
        [71.85485457, 66.70779736, 89.8411578, 90.59404205, 87.21090436],
        [71.48172562, 85.36667849, 91.67162922, 91.00117936, 83.02172741],
        [71.15056359, 90.45682056, 91.93708135, 91.17016583, 86.02437737],
        [73.08506129, 91.65991055, 91.12099009, 91.4906588, 86.58869021],
        [83.01407452, 92.02556539, 91.61065407, 89.88224812, 82.39923067],
        [90.265579, 91.4473943, 90.15567032, 87.53854849, 75.85500451],
        [89.56558448, 88.0319899, 85.01598918, 81.06297344, 74.42134159]
    ]),
    "subnetwork=40%": np.array([
        [69.54505373, 66.73305132, 89.68180809, 89.91158516, 86.44566129],
        [70.15996101, 83.75259302, 90.35999735, 90.24616707, 81.72103565],
        [69.97370219, 89.54081494, 91.42825342, 90.88308146, 85.82262246],
        [71.12774332, 92.06690946, 90.75918765, 91.62247655, 85.36004637],
        [79.83505624, 91.2547052, 90.72782637, 88.63764104, 82.27741878],
        [90.13239446, 90.588027, 89.76618598, 86.86198554, 73.75838315],
        [88.41118579, 88.28548113, 83.98816022, 78.95209589, 72.20781033]
    ]),
    "subnetwork=30%": np.array([
        [68.70799344, 66.20952892, 87.71052229, 89.13183793, 85.14687843],
        [68.72658645, 79.11296234, 90.01384672, 90.28427005, 79.17275524],
        [69.82251288, 87.79434078, 89.82328567, 89.97352918 ,86.40613961],
        [70.76053714, 91.52022653, 89.87302658, 90.25289146, 82.56381687],
        [78.51909907, 90.84760249, 89.76026321, 87.66086212, 80.19969608],
        [88.41905207, 89.88320545, 88.75302843, 83.75024582, 72.12181766],
        [86.66004608, 86.46126697, 82.72461988, 76.23089588, 70.01663221]
    ]),
    "subnetwork=20%": np.array([
        [68.31420687, 64.67615925, 85.16044833, 84.33715978, 80.68092861],
        [67.22874189, 75.42332258, 85.20213266, 87.00695796, 75.01662356],
        [67.73220068, 84.55996447, 87.93570302, 87.04637583, 82.50721315],
        [69.25572597, 88.9556138, 86.00859869, 86.52981427 ,78.31089658],
        [78.00495391, 87.72643939, 86.54975101, 83.81833753, 74.98766714],
        [83.45166769, 86.48096148, 84.24682451, 78.93403345, 68.36754067],
        [80.05596934, 81.3829243, 76.11883609, 71.15735142, 66.96390107]
    ]),
    "subnetwork=10%": np.array([
        [61.04328469, 59.72604723, 68.58535108, 69.10114563, 69.08968071],
        [60.52947402, 62.89173782, 68.03570965, 74.35020487, 68.32214812],
        [60.94022728, 71.16702855, 73.56023264, 73.19119254, 71.43954532],
        [61.28770433, 75.14143433, 74.74546781, 74.6462455, 69.35864497],
        [66.47994648, 70.30274772, 75.77579968, 73.07962872, 63.66667532],
        [65.36798761, 73.60152481, 69.17522931, 67.35302785, 61.27781959],
        [63.30873104, 65.63031975, 65.23691381, 62.82384219, 56.42387333]
    ])
}

matrix_plot(accuracy_data_pcc, lambda_values, sigma_values, fontsize=20)
topographic_plot(accuracy_data_pcc, lambda_values, sigma_values, fontsize=20)
topographic_plot(accuracy_data_pcc, lambda_values, sigma_values, max_mark=True, fontsize=20)

# matrix_plot(accuracy_data_plv, lambda_values, sigma_values)
# topographic_plot(accuracy_data_plv, lambda_values, sigma_values)
# topographic_plot(accuracy_data_plv, lambda_values, sigma_values, max_mark=True)